import argparse
import json
from datetime import datetime
from .main import scan_domain

def main():
    parser = argparse.ArgumentParser(description="Domain Security Scanner")
    parser.add_argument("domain", help="Domain to scan")
    parser.add_argument("--cert-spotter-key", help="Cert Spotter API key", default=None)
    parser.add_argument("--output", "-o", help="Output file path")
    parser.add_argument("--json", action="store_true", help="Output in JSON format")
    
    args = parser.parse_args()

    # Run the scan
    results = scan_domain(args.domain, args.cert_spotter_key)

    # Format output
    if args.json:
        output = json.dumps(results, indent=2)
    else:
        output = format_human_readable(results)

    # Write or print results
    if args.output:
        with open(args.output, 'w') as f:
            f.write(output)
    else:
        print(output)

def format_human_readable(results: dict) -> str:
    """
    Formats scan results in a human-readable format.
    """
    output = []
    output.append("Domain Security Scan Results")
    output.append("=" * 50)
    output.append(f"Domain: {results['scan_metadata']['domain']}")
    output.append(f"Scan ID: {results['scan_metadata']['scan_id']}")
    output.append(f"Timestamp: {results['scan_metadata']['timestamp']}")
    output.append("-" * 50)

    # Summary
    summary = results.get("summary", {})
    output.append("\nSummary:")
    output.append(f"Status: {summary.get('status', 'unknown')}")
    output.append(f"Overall Risk: {summary.get('risk_assessment', {}).get('overall', 'unknown')}")
    
    if summary.get("issues_found"):
        output.append("\nIssues Found:")
        for issue in summary["issues_found"]:
            output.append(f"- {issue}")

    if summary.get("recommendations"):
        output.append("\nRecommendations:")
        for rec in summary["recommendations"]:
            output.append(f"- {rec}")

    return "\n".join(output)

if __name__ == "__main__":
    main()
